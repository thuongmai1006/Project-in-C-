//Thuong Mai
/*
Heat conduction_ 2D transient. Numerical Differential Computations.
Project details: A very long rectangular solid steel bar initially at 20 degrees Celsius is exposed to an environment that can alter the heat distribution 
within the bar. The top surface of the bar is under the influence of 400 degrees Celsius, where the sides are affected by 200 degrees Celsius and the 
bottom facing 100 degrees heat sources as shown in the diagram. We are interested in determining the temperature variation within the bar as the bar heats up 
and its final steady-state temperature distribution.And the given temperature of the steel bar is:
T(t=0)=20 C
T top=400 C    
T right=200 C
T left=200 C    
T bottom=100 C
This project is a computing program in C++ to estimate the alternative surface temperature distribution of a very long rectangular solid steel bar by breaking
it to various locations within the surface and using the Finite Difference approach to roughly calculate the temperature allocation within the bar. 
Dev C++ 5.11 and “dislin” libraries are utilized. 
*/


#include<iostream>
#include<cmath>
#include<iomanip>
#include<fstream>
#include<string>
#include <cstdio>
#include <windows.h>
#include "c:\dislin\dislin.h"
using namespace std;
class temp
{
	public:
		string file;
		void input(int &m, int &n);
		void function_1(int m, int n, float**T,float *Tcenter, string &file );
		void function_2(int m, int n,float **T,string file	);
		void temp_0(int m, int n, float **T,string file);
		void time_lot(int m,int n,float *Tcenter,string file);
		void T_contour_plot(int m, int n,float **T); 
		void T_contour_shade_plot(int m, int n,float **T);
		void T_x_plot(int m, int n,float **T);
		void T_y_plot(int m, int n,float **T);
		double get_dx();
		double get_dy();
		double get_dt();
	private:
		double dx;
		double dy;
		double dt;
		float *Tcenter;
		float **T;
		float **t_half;
		
};
int main()
{
	string file;
	ofstream write;
	temp TEMP;
	int m, n, time=1300;
		cout<<"\n Hello, welcome to my 2D transient_Heat Conduction estimate program!"<<endl;
		cout<<"\n This program will assist you in estimating the surface temperature of the environment heat distribution."<<endl;
		cout<<"\n To output this program in your text file, enter the file name."<<endl;
	cin>>file;
	cout<<"\n Enter the number of rows and columns of the surface: "<<endl;
	cin>>m>>n;
	write.open(file.c_str());
		cout<<"\n Number of rows is  : "<<m<<endl;
		cout<<"\n Number of colums is: "<<n<<endl;
		write<<"\n Number of rows is  : "<<m<<endl;
		write<<"\n Number of colums is: "<<n<<endl;
	TEMP.input(m,n);
		cout<<"\n The value of delta x is dx = "<<TEMP.get_dx()<<" m "<<endl;
		cout<<"\n The value of delta y is dy = "<<TEMP.get_dy()<<" m "<<endl;
		cout<<"\n The value of delta t is dt = "<<TEMP.get_dt()<<" m "<<endl;
		write<<"\n The value of delta x is dx = "<<TEMP.get_dx()<<" m "<<endl;
		write<<"\n The value of delta y is dy = "<<TEMP.get_dy()<<" m "<<endl;
		write<<"\n The value of delta t is dt = "<<TEMP.get_dt()<<" s "<<endl;
	double total_time= time*TEMP.get_dt();
	double deltat=TEMP.get_dt();
		cout<<"\n The estimate time for the suface temperature to be steady is: "<<total_time<<" seconds."<<endl;
		write<<"\n The estimate time for the suface temperature to be steady is: "<<total_time<<" seconds."<<endl;
		
	float **t_half= new float *[m];
	for (int i=0;i<m;i++)
		{
			t_half[i]=new float [n];
		}
	float *Tcenter = new float [time];
	float **T= new float *[m];
		for (int i=0;i<m;i++)
		{
			T[i]=new float [n];
		}
		cout<<"\n The temperature at time t = 0 is:"<<endl;
		TEMP.temp_0(m,n,T,file);
		cout<<"\n The temperature at half time t = "<<total_time/2<<" is: "<<endl;
		TEMP.function_1(m,n,T,Tcenter,file);
		cout<<"\n The temperature at time final t = "<<total_time<<" is: "<<endl;
		TEMP.function_2(m,n,T,file);
		cout<<"\n The temperature of the midpoint is: "<<endl;
		TEMP.time_lot(m,n,Tcenter,file);
		cout<<"\n The contour plot is :"<<endl;
		//write<<"\n The contour plot is :"<<endl;
		TEMP.T_contour_plot(m,n,T); //contour baby does not work 
		cout<<"\n The contour shade plot is: "<<endl;
		//write<<"\n The contour shade plot is: "<<endl;
		TEMP.T_contour_shade_plot(m, n, T);
		cout<<"\n The plot for the x- axis:"<<endl;
		//write<<"\n The plot for the x- axis:"<<endl;
		TEMP.T_x_plot(m,n,T);
		cout<<"\n The plot for the y- axis:"<<endl;
		//write<<"\n The plot for the y- axis:"<<endl;
		TEMP.T_y_plot(m,n,T);
		cout<<"\n Thank you for using my program!"<<endl;
	delete [] T;
	return 0;
}
void  temp::input(int &m, int &n)
		{
			float width=0.02, height=0.05;
			dx=width/(n-1);
			dy=height/(m-1);
			dt=0.005;
		}
void temp::function_1( int m, int n, float **T, float *Tcenter ,string &file)
{
	ofstream write;
	write.open(file.c_str(),ios::app);
	write<<"\n The temperature at half time t = "<<6.5/2<<" is: "<<endl;
	float t_half[m][n];

	const double a=1.88E-05 ;
	int time=0;
	for (int i=1;i<m-1;i++)
	{
		for (int j=1; j<n-1;j++)
		{
               T[i][j]=20;
        }
    }
	for (int i=0;i<m;i++)
	{
		T[i][0]=200.000;
		T[i][n-1]=200.000;
	}
	for (int j=0;j<n ;j++)
	{
		T[0][j]=100.000;
		T[m-1][j]=400.000;
	}
while (time<=1300) 
{
	for (int i=1;i<m-1;i++)
	{
		for (int j=1; j<n-1;j++)
		{
		T[i][j]=(( T[i+1][j] - 2*T[i][j] + T[i-1][j]  )/pow(dx,2) +	( T[i][j+1] - 2*T[i][j] + T[i][j-1]  )/pow(dy,2))*a*dt+T[i][j];
		}	
	}
	time++;
	if (time==650)
	{
		for (int i=0;i<m;i++)
		{
			for (int j=0;j<n;j++)
			{
				t_half[i][j]=T[i][j];
			}
		}
	}
		Tcenter[time]=T[m/2][n/2];
}

for (int i=0;i<m;i++)
		{
			for (int j=0;j<n;j++)
			{
				cout<<setw(20)<<t_half[i][j];
				write<<setw(20)<<t_half[i][j];
			}
			cout<<endl;
			write<<endl;
		}
}
void temp::function_2 (int m, int n,float **T,string file)  //this is for the final time 
{
	ofstream write;
	write.open(file.c_str(), ios::app);
	write<<"\n The temperature at time final t = "<<1300*dt<<" is: "<<endl;
	for (int i=0;i<m;i++)
	{
		for (int j=0;j<n;j++)
		{
			cout<<setw(20)<<T[i][j];
			write<<setw(20)<<T[i][j];
		}
		cout<<endl;
		write<<endl;
	}
}
void temp::temp_0(int m, int n, float **T,string file) // this function is to determine the temperature at the time=0
{
	ofstream write;
	write.open(file.c_str(),ios::app);
	write<<"\n The temperature at time t = 0 is:"<<endl;
		for (int i=1;i<m-1;i++)
	{
		for (int j=1; j<n-1;j++)
		{
               T[i][j]=20;
        }
    }
    	for (int i=0;i<m;i++)
	{
		T[i][0]=200.000;
		T[i][n-1]=200.000;
	}
	for (int j=0;j<n ;j++)
	{
		T[0][j]=100.000;
		T[m-1][j]=400.000;
	}
		for (int i=0;i<m;i++)
		{
			 for (int j=0;j<n;j++)
			{
			cout<<setw(20)<<T[i][j];
			write<<setw(20)<<T[i][j];
			}
			cout<<endl;
			write<<endl;
		}
	}
double temp::get_dx()
{
	return dx;
}
double temp::get_dy()
{
	return dy;
}
double temp::get_dt()
{
	return dt;
}
void temp::time_lot(int m,int n,float *Tcenter,string file)
{
	ofstream write;
	write.open(file.c_str(), ios::app);
	write<<"\n The temperature of the midpoint is: "<<endl;
	float t[1300];
	for (int i = 1 ;i<=1300; i++)
	{
		t[i]=i-1;
		cout<<Tcenter[i]<<endl;
		write<<Tcenter[i]<<endl;
	}
//***************Plot Configuration******************  

  metafl("pdf");//Creates screen output. To create PDF output use "pdf"
  disini();
  pagera();
  complx();
  axspos(450,1800);
  axslen(2200,1200);
  name("time(s)","x");
  name("Temperature(degree C)","y");
  labdig(3,"x");
  labdig(1,"y");
  ticks(10,"xy");
  titlin("Transient Center Temperture",1);
  titlin("temperature versus time",3);
  graf(0.,1300.,0.,150.,0.,250.,0.,10); // what is the step of the temperature
  //question, why does this work fine as well graf(0.,1300.,0.,150.,0.,250.,20.,10);
  setrgb(0.7,0.7,0.7);
  grid(1,1);
  color("white");
 
  title();
//********************Create Plot********************
  color("red");
  curve(t,Tcenter,1300); //plots cos curve
  color("red");
  disfin();
}
void temp::T_contour_plot(int m, int n,float **T)
{
		float x[n], y[m], z[m][n];
	cout<<"does this function merge in?"<<endl;

	
for (int i=0;i<m;i++)
{
	for(int j=0;j<n;j++)
	{
	 z[i][j]=T[i][j];	
	}
}
	
//***************Plot Configuration******************  
  metafl("pdf");//Creates screen output. To create PDF output use "pdf"
  disini();
  pagera();
  complx();
  axspos(450,1800);
  axslen(2200,1200);
  name("height(m)","x");
  name("width(m)","y");
  labdig(3,"x");
  labdig(3,"y");
  ticks(10,"xy");
  titlin("Steady state 2D temperatures",1);
  titlin(" Contour Plot",3);
   graf(0.,0.05,0.,0.005,0.,0.02,0.,0.005); // what is the step of the temperature
  setrgb(0.7,0.7,0.7);
  grid(1,1);
  color("white");
  title();
//********************Create Plot********************
		for (int i=0;i<n;i++)
		{
			x[i]=i*dx;
		}
		for (int j=0;j<m;j++)
		{
			y[j]=j*dy;
		}
	float zlevel=100;

	for (int g=0;g<9;g++)
	{
		zlevel=zlevel+30;
		labels("float","contur"); 
	  	color("red");
		contur(y,m,x,n,(const float *)z,zlevel);
	}
  disfin();
}
void temp::T_contour_shade_plot(int m, int n,float **T)
{
	float x[n], y[m], z[m][n];
	
for (int i=0;i<m;i++)
{
	for(int j=0;j<n;j++)
	{
	 z[i][j]=T[i][j];	
	}
}
	
//***************Plot Configuration******************  
  metafl("pdf");//Creates screen output. To create PDF output use "pdf"
  disini();
  pagera();
  complx();
  axspos(450,1800);
  axslen(2200,1200);
  name("height(m)","x");
  name("width(m)","y");
  labdig(3,"x");
  labdig(3,"y");
  ticks(10,"xy");
  titlin("Steady state 2D temperatures",1);
  titlin("Shaded Contour Plot",3);
   graf(0.,0.05,0.,0.005,0.,0.02,0.,0.005); // what is the step of the temperature
  setrgb(0.7,0.7,0.7);
  grid(1,1);
  color("white");
  title();
//********************Create Plot********************
		for (int i=0;i<n;i++)
		{
			x[i]=i*dx;
		}
		for (int j=0;j<m;j++)
		{
			y[j]=j*dy;
		}
		int num=m+n;
	float zlevel[num];
	
	zlevel[0]={100};

	for (int g=0;g<num;g++)
	{
		zlevel[g]=zlevel[g-1]+30;
		labels("float","contur"); 
	  	color("yellow");
		conshd(y,m,x,n,(const float *)z,zlevel,num);
	}
  disfin();
}
void temp::T_x_plot(int m, int n,float **T)
{
	cout<<"This is the function for the x-plot"<<endl;
	float x0[1000],x1[1000],x2[1000],x3[1000],x4[1000];
	int x0_25=0.25*m,x0_5 = 0.5*m,x0_75=0.75*m,x1_0=m-1;
	//that means that it does need some calculations here 
	float l[n]; 
			for (int i=0;i<n;i++)
			{
				l[i]=dx*i;
			}
			for (int j=0;j<n;j++)
			{
				x0[j]=T[0][j]; 
				x1[j]=T[x0_25][j];
				x2[j]=T[x0_5][j];
				x3[j]=T[x0_75][j];
				x4[j]=T[x1_0][j]; 
			}
//***************Plot Configuration******************  
  metafl("pdf");//Creates screen output. To create PDF output use "pdf"
  disini();
  pagera();
  complx();
  axspos(450,1800);
  axslen(2200,1200);
  name("width(m)","x");
  name("Temperature(degree C)","y");
  labdig(3,"x");
  labdig(1,"y");
  ticks(100,"xy");
  titlin("Steady state 2D temperatures",1);
  titlin("Rectangular Metal Bar Cross Section",2);
  titlin("y = 0H, 0.25H,0.5H,0.75H, H",3);
  graf(0.,0.02,0.,0.005,0.,450.,0.,50.);
  setrgb(0.7,0.7,0.7);
  grid(1,1);
  color("white");
  title();
//********************Create Plot********************
	color("red");
	curve(l,x0,n);
	color("blue");
	curve(l,x1,n);
	color("yellow");
	curve(l,x2,n);
	color("green");
	curve(l,x3,n);
	color("red");
	curve(l,x4,n);
  	disfin();
}

void temp::T_y_plot(int m, int n,float **T)
{
cout<<"This is the function for the y-plot"<<endl;
	float y0[1000],y1[1000],y2[1000],y3[1000],y4[1000];
	int y0_25=0.25*n,y0_5 = 0.5*n,y0_75=0.75*n,y1_0=n-1;
	float l[m]; //only works for m=20, n=10
			for (int j=0;j<m;j++)
			{
				l[j]=dy*j;
			}
			for (int i=0;i<m;i++)
			{
				y0[i]=T[i][0]; 
				y1[i]=T[i][y0_25];
				y2[i]=T[i][y0_5];
				y3[i]=T[i][y0_75];
				y4[i]=T[i][y1_0];
			}
//***************Plot Configuration******************  
  metafl("pdf");//Creates screen output. To create PDF output use "pdf"
  disini();
  pagera();
  complx();
  axspos(450,1800);
  axslen(2200,1200);
  name("height(m)","x");
  name("Temperature(degree C)","y");
  labdig(3,"x");
  labdig(1,"y");
  ticks(100,"xy");
  titlin("Steady state 2D temperatures",1);
  titlin("Rectangular Metal Bar Cross Section",2);
  titlin("x = 0L, 0.25L,0.5L,0.75L,L",3);
  graf(0.,0.05,0.,0.01,0.,450.,0.,50.);
  setrgb(0.7,0.7,0.7);
  grid(1,1);
  color("white");
  title();
//********************Create Plot********************
  	color("red");
  	curve(l,y0,m); //plots cos curve
  	color("blue");
  	curve(l,y1,m);
  	color("yellow");
  	curve(l,y2,m);
  	color("green");
  	curve(l,y3,m);
	color("red");
  	curve(l,y4,m);
  	disfin(); 
}



